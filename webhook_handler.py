import logging
from typing import Dict, Any
from config import log_booking_event, log_error_with_context
from flex_messages import reply_to_user, send_admin_notification
from booking_logic import handle_booking_process
from utils import get_line_display_name

logger = logging.getLogger(__name__)

async def handle_webhook_request(body: dict, headers: dict) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ webhook request ‡∏à‡∏≤‡∏Å LINE"""
    try:
        events = body.get('events', [])
        
        for event in events:
            event_type = event.get('type')
            
            if event_type == 'message':
                await handle_message_event(event)
            elif event_type == 'follow':
                await handle_follow_event(event)
            elif event_type == 'unfollow':
                await handle_unfollow_event(event)
            else:
                logger.info(f"Unhandled event type: {event_type}")
        
        return True
        
    except Exception as e:
        log_error_with_context(
            error=e,
            context="handle_webhook_request",
            additional_data={"body": body}
        )
        return False

async def handle_message_event(event: dict):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ message event"""
    try:
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        reply_token = event['replyToken']
        user_id = event['source']['userId']
        message = event['message']
        message_type = message['type']
        
        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô log)
        display_name = get_user_display_name(user_id)
        
        if message_type == 'text':
            message_text = message['text']
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            log_booking_event(
                event_type="MESSAGE_RECEIVED",
                user_id=user_id,
                user_name=display_name,
                details={"message": message_text}
            )
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            await handle_text_message(reply_token, user_id, message_text, display_name)
            
        else:
            logger.info(f"Received non-text message: {message_type} from {display_name}")
            reply_to_user(reply_token, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            
    except Exception as e:
        log_error_with_context(
            error=e,
            context="handle_message_event",
            user_id=event.get('source', {}).get('userId'),
            additional_data={"event": event}
        )

async def handle_text_message(reply_token: str, user_id: str, message_text: str, display_name: str):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"""
    try:
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        if message_text.lower() in ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi', 'start']:
            log_booking_event(
                event_type="GREETING",
                user_id=user_id,
                user_name=display_name
            )
            reply_to_user(reply_token, "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏±‡∏Å‡∏©‡πå‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏î‡∏ô‡πÉ‡∏ï‡πâ\n\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
            
        elif message_text in ['‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞', '‡∏à‡∏≠‡∏á']:
            log_booking_event(
                event_type="BOOKING_STARTED",
                user_id=user_id,
                user_name=display_name
            )
            await handle_booking_process(reply_token, user_id, 'start_booking', display_name)
            
        elif message_text in ['‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á']:
            log_booking_event(
                event_type="VIEW_RESERVATIONS",
                user_id=user_id,
                user_name=display_name
            )
            await handle_booking_process(reply_token, user_id, 'view_reservations', display_name)
            
        elif message_text.startswith('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:'):
            # ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            log_booking_event(
                event_type="CANCEL_SPECIFIC_BOOKING",
                user_id=user_id,
                user_name=display_name,
                details={"cancel_request": message_text}
            )
            await handle_booking_process(reply_token, user_id, message_text, display_name)
            
        elif message_text in ['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á']:
            log_booking_event(
                event_type="CANCEL_BOOKING_PROCESS",
                user_id=user_id,
                user_name=display_name
            )
            await handle_booking_process(reply_token, user_id, 'cancel_process', display_name)
            
        else:
            # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            booking_result = await handle_booking_process(reply_token, user_id, message_text, display_name)
            
            if not booking_result:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°
                log_booking_event(
                    event_type="CUSTOMER_INQUIRY",
                    user_id=user_id,
                    user_name=display_name,
                    details={"inquiry": message_text}
                )
                
                # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                send_admin_notification(user_id, message_text, display_name)
                
                # ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                reply_to_user(
                    reply_token, 
                    "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞'"
                )
                
    except Exception as e:
        log_error_with_context(
            error=e,
            context="handle_text_message",
            user_id=user_id,
            additional_data={
                "message_text": message_text,
                "display_name": display_name
            }
        )

async def handle_follow_event(event: dict):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"""
    try:
        user_id = event['source']['userId']
        reply_token = event['replyToken']
        display_name = get_user_display_name(user_id)
        
        log_booking_event(
            event_type="USER_FOLLOWED",
            user_id=user_id,
            user_name=display_name
        )
        
        welcome_message = """üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏±‡∏Å‡∏©‡πå‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏î‡∏ô‡πÉ‡∏ï‡πâ!

üì± ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:
‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞' - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞
‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

üïê ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: 18:30 - 21:30 ‡∏ô.
üìç ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤! üôè"""
        
        reply_to_user(reply_token, welcome_message)
        
    except Exception as e:
        log_error_with_context(
            error=e,
            context="handle_follow_event",
            user_id=event.get('source', {}).get('userId'),
            additional_data={"event": event}
        )

async def handle_unfollow_event(event: dict):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"""
    try:
        user_id = event['source']['userId']
        
        log_booking_event(
            event_type="USER_UNFOLLOWED",
            user_id=user_id,
            user_name="Unknown (unfollowed)"
        )
        
        logger.info(f"User {user_id} unfollowed the bot")
        
    except Exception as e:
        log_error_with_context(
            error=e,
            context="handle_unfollow_event",
            additional_data={"event": event}
        )

def get_user_display_name(user_id: str) -> str:
    """‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        # ‡πÉ‡∏ä‡πâ LINE API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        import requests
        from config import LINE_HEADERS
        
        response = requests.get(
            f"https://api.line.me/v2/bot/profile/{user_id}",
            headers=LINE_HEADERS
        )
        
        if response.status_code == 200:
            profile = response.json()
            return profile.get('displayName', 'Unknown User')
        else:
            logger.warning(f"Failed to get user profile: {response.status_code}")
            return f"User_{user_id[:8]}"
            
    except Exception as e:
        logger.error(f"Error getting user display name: {e}")
        return f"User_{user_id[:8]}"