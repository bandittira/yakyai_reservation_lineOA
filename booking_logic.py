import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple, List
import re

from config import log_booking_event, log_error_with_context
from flex_messages import (
    reply_to_user, 
    send_date_selection_flex, 
    send_time_selection_flex,
    send_flex_confirmation,
    send_user_reservations_flex
)
from models import ReservationData
from google_sheets import (
    add_reservation_to_sheet, 
    find_user_reservations, 
    cancel_reservation
)
from session_manager import (
    get_user_session, 
    update_user_session, 
    clear_reservation_session,
    start_reservation_session,
    start_cancellation_session,
    reset_timeout_task
)
from utils import get_line_display_name

logger = logging.getLogger(__name__)

async def handle_booking_process(reply_token: str, user_id: str, message: str, display_name: str = None) -> bool:
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞ (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö session management)
    
    Returns:
        bool: True ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà
    """
    try:
        if not display_name:
            display_name = get_line_display_name(user_id)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡πà‡∏≠‡∏ô
        if message in ['‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞', '‡∏à‡∏≠‡∏á', 'booking']:
            await start_booking_process(reply_token, user_id, display_name)
            return True
            
        elif message in ['‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', 'my reservations']:
            await show_user_reservations(reply_token, user_id, display_name)
            return True
            
        elif message in ['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', 'cancel booking']:
            await start_cancellation_process(reply_token, user_id, display_name)
            return True
            
        elif message in ['‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', 'cancel', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á']:
            await cancel_booking_process(reply_token, user_id, display_name)
            return True
            
        elif message.startswith('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:'):
            await handle_specific_cancellation(reply_token, user_id, message, display_name)
            return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        session = get_user_session(user_id)
        if not session:
            return False
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï timeout ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        reset_timeout_task(user_id)
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        step = session.get('step', '')
        
        if step == 'name':
            return await handle_name_input(reply_token, user_id, message, display_name)
        elif step == 'phone':
            return await handle_phone_input(reply_token, user_id, message, display_name)
        elif step == 'date':
            return await handle_date_selection(reply_token, user_id, message, display_name)
        elif step == 'time':
            return await handle_time_selection(reply_token, user_id, message, display_name)
        elif step == 'party_size':
            return await handle_party_size_input(reply_token, user_id, message, display_name)
        elif step == 'special_requests':
            return await handle_special_requests_input(reply_token, user_id, message, display_name)
        elif step == 'cancel_phone':
            return await handle_cancellation_phone_input(reply_token, user_id, message, display_name)
        
        return False
        
    except Exception as e:
        log_error_with_context(
            error=e,
            context="handle_booking_process",
            user_id=user_id,
            additional_data={
                "message": message,
                "display_name": display_name
            }
        )
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        clear_reservation_session(user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        return True

async def start_booking_process(reply_token: str, user_id: str, display_name: str):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    try:
        log_booking_event(
            event_type="BOOKING_PROCESS_STARTED",
            user_id=user_id,
            user_name=display_name
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡πÉ‡∏´‡∏°‡πà
        start_reservation_session(user_id)
        
        reservation_info = (
            "üèÆ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏¢‡∏±‡∏Å‡∏©‡πå‡πÉ‡∏´‡∏ç‡πà‡πÅ‡∏î‡∏ô‡πÉ‡∏ï‡πâ\n\n"
            "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:\n"
            "‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: 18:30 - 21:30 ‡∏ô.\n"
            "üìÖ ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô\n"
            "üë• ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 1-20 ‡∏Ñ‡∏ô\n"
            "üé´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n\n"
            "üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...\n"
            "‡∏Ç‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡∏Ñ‡πà‡∏∞"
        )
        reply_to_user(reply_token, reservation_info)
        
    except Exception as e:
        log_error_with_context(error=e, context="start_booking_process", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

async def handle_name_input(reply_token: str, user_id: str, name_text: str, display_name: str) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠"""
    try:
        name = name_text.strip()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ä‡∏∑‡πà‡∏≠
        if len(name) < 2:
            reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
            return True
            
        if len(name) > 50:
            reply_to_user(reply_token, "‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
            return True
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó session
        update_user_session(user_id, step="phone", data={"customer_name": name})
        
        log_booking_event(
            event_type="NAME_ENTERED",
            user_id=user_id,
            user_name=display_name,
            details={"customer_name": name}
        )
        
        reply_to_user(reply_token, "‡∏Ç‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏Ñ‡πà‡∏∞ üìû\n\n(‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')")
        return True
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_name_input", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        return True

async def handle_phone_input(reply_token: str, user_id: str, phone_text: str, display_name: str) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"""
    try:
        phone = phone_text.strip().replace('-', '').replace(' ', '')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (10 ‡∏´‡∏•‡∏±‡∏Å, ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)
        phone_pattern = r'^0\d{9}$'
        if not re.match(phone_pattern, phone):
            reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (10 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 0)")
            return True
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó session
        update_user_session(user_id, step="date", data={"phone": phone})
        
        log_booking_event(
            event_type="PHONE_ENTERED",
            user_id=user_id,
            user_name=display_name,
            details={"phone": phone}
        )
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        send_date_selection_flex(reply_token)
        return True
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_phone_input", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        return True

async def handle_date_selection(reply_token: str, user_id: str, date_text: str, display_name: str) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (dd-mm-yyyy)
        date_pattern = r'^\d{1,2}-\d{1,2}-\d{4}$'
        if not re.match(date_pattern, date_text):
            reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ")
            return True
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        try:
            day, month, thai_year = date_text.split('-')
            year = int(thai_year) - 543  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
            selected_date = datetime(year, int(month), int(day)).date()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
            today = datetime.now().date()
            if selected_date < today:
                reply_to_user(reply_token, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà")
                return True
                
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô
            if (selected_date - today).days > 7:
                reply_to_user(reply_token, "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 7 ‡∏ß‡∏±‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà")
                return True
                
        except ValueError:
            reply_to_user(reply_token, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")
            return True
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó session
        update_user_session(user_id, step="time", data={"date": date_text})
        
        log_booking_event(
            event_type="DATE_SELECTED",
            user_id=user_id,
            user_name=display_name,
            details={"selected_date": date_text}
        )
        
        # ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
        send_time_selection_flex(reply_token)
        return True
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_date_selection", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        return True

async def handle_time_selection(reply_token: str, user_id: str, time_text: str, display_name: str) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (HH:MM)
        time_pattern = r'^\d{2}:\d{2}$'
        if not re.match(time_pattern, time_text):
            reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ")
            return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        try:
            selected_time = datetime.strptime(time_text, "%H:%M").time()
            start_time = datetime.strptime("18:30", "%H:%M").time()
            end_time = datetime.strptime("21:30", "%H:%M").time()
            
            if not (start_time <= selected_time <= end_time):
                reply_to_user(reply_token, "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ 18:30 - 21:30 ‡∏ô.")
                return True
                
        except ValueError:
            reply_to_user(reply_token, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà")
            return True
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó session
        update_user_session(user_id, step="party_size", data={"time": time_text})
        
        log_booking_event(
            event_type="TIME_SELECTED",
            user_id=user_id,
            user_name=display_name,
            details={"selected_time": time_text}
        )
        
        reply_to_user(reply_token, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏Ñ‡πà‡∏∞ üë•\n\n(‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')")
        return True
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_time_selection", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        return True

async def handle_party_size_input(reply_token: str, user_id: str, party_size_text: str, display_name: str) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô"""
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        try:
            party_size = int(party_size_text.strip())
        except ValueError:
            reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (1-20)")
            return True
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô
        if party_size <= 0:
            reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
            return True
            
        if party_size > 20:
            reply_to_user(reply_token, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 20 ‡∏Ñ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Ñ‡πà‡∏∞")
            return True
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó session
        update_user_session(user_id, step="special_requests", data={"party_size": party_size})
        
        log_booking_event(
            event_type="PARTY_SIZE_ENTERED",
            user_id=user_id,
            user_name=display_name,
            details={"party_size": party_size}
        )
        
        reply_to_user(reply_token, "‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ (‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏ï‡πä‡∏∞‡∏£‡∏¥‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏û‡πâ)\n‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏û‡∏¥‡∏°‡∏û‡πå - ‡∏Ñ‡πà‡∏∞\n\n(‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')")
        return True
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_party_size_input", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        return True

async def handle_special_requests_input(reply_token: str, user_id: str, requests_text: str, display_name: str) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"""
    try:
        special_requests = requests_text.strip() if requests_text.strip() != "-" else ""
        
        if len(special_requests) > 200:
            reply_to_user(reply_token, "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤ 200 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
            return True
        
        log_booking_event(
            event_type="SPECIAL_REQUESTS_ENTERED",
            user_id=user_id,
            user_name=display_name,
            details={"special_requests": special_requests or "‡πÑ‡∏°‡πà‡∏°‡∏µ"}
        )
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session
        session = get_user_session(user_id)
        if not session:
            reply_to_user(reply_token, "‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
            return True
        
        session_data = session.get('data', {})
        session_data['special_requests'] = special_requests
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á reservation object
        reservation = ReservationData(
            customer_name=session_data.get('customer_name', ''),
            phone=session_data.get('phone', ''),
            date=session_data.get('date', ''),
            time=session_data.get('time', ''),
            party_size=session_data.get('party_size', 0),
            special_requests=special_requests,
            line_display_name=display_name,
            timestamp=datetime.now(),
            user_id=user_id
        )
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Google Sheets
        success, msg, booking_id = add_reservation_to_sheet(reservation)
        
        # ‡∏•‡πâ‡∏≤‡∏á session
        clear_reservation_session(user_id)
        
        if success:
            reservation.booking_id = booking_id
            
            log_booking_event(
                event_type="BOOKING_COMPLETED",
                user_id=user_id,
                user_name=display_name,
                details={
                    "booking_id": booking_id,
                    "date": session_data.get('date', ''),
                    "time": session_data.get('time', ''),
                    "party_size": session_data.get('party_size', 0)
                }
            )
            
            send_flex_confirmation(reply_token, reservation)
        else:
            log_booking_event(
                event_type="BOOKING_FAILED",
                user_id=user_id,
                user_name=display_name,
                details={"error_message": msg}
            )
            
            reply_to_user(reply_token, msg)
        
        return True
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_special_requests_input", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        clear_reservation_session(user_id)
        return True

async def show_user_reservations(reply_token: str, user_id: str, display_name: str):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        log_booking_event(
            event_type="VIEW_RESERVATIONS_REQUESTED",
            user_id=user_id,
            user_name=display_name
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        start_cancellation_session(user_id)
        reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞")
        
    except Exception as e:
        log_error_with_context(error=e, context="show_user_reservations", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")

async def start_cancellation_process(reply_token: str, user_id: str, display_name: str):
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    try:
        log_booking_event(
            event_type="CANCELLATION_PROCESS_STARTED",
            user_id=user_id,
            user_name=display_name
        )
        
        start_cancellation_session(user_id)
        reply_to_user(reply_token, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞")
        
    except Exception as e:
        log_error_with_context(error=e, context="start_cancellation_process", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")

async def handle_cancellation_phone_input(reply_token: str, user_id: str, phone_text: str, display_name: str) -> bool:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"""
    try:
        phone = phone_text.strip()
        
        log_booking_event(
            event_type="CANCELLATION_PHONE_ENTERED",
            user_id=user_id,
            user_name=display_name,
            details={"phone": phone}
        )
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        reservations = find_user_reservations(phone)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≤‡∏Å session
        session = get_user_session(user_id)
        session_data = session.get('data', {}) if session else {}
        
        if "cancel_date" in session_data and "cancel_time" in session_data:
            # ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
            success, msg = cancel_reservation(phone, session_data["cancel_date"], session_data["cancel_time"])
            clear_reservation_session(user_id)
            
            if success:
                log_booking_event(
                    event_type="CANCELLATION_SUCCESS",
                    user_id=user_id,
                    user_name=display_name,
                    details={
                        "phone": phone,
                        "date": session_data["cancel_date"],
                        "time": session_data["cancel_time"]
                    }
                )
            else:
                log_booking_event(
                    event_type="CANCELLATION_FAILED",
                    user_id=user_id,
                    user_name=display_name,
                    details={
                        "phone": phone,
                        "date": session_data["cancel_date"],
                        "time": session_data["cancel_time"],
                        "reason": msg
                    }
                )
            
            reply_to_user(reply_token, msg)
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            clear_reservation_session(user_id)
            
            if reservations:
                send_user_reservations_flex(reply_token, reservations)
            else:
                reply_to_user(reply_token, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πà‡∏∞")
        
        return True
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_cancellation_phone_input", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        clear_reservation_session(user_id)
        return True

async def handle_specific_cancellation(reply_token: str, user_id: str, cancel_message: str, display_name: str):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
    try:
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:dd-mm-yyyy:HH:MM"
        parts = cancel_message.split(':')
        if len(parts) != 3:
            reply_to_user(reply_token, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return
        
        _, date_part, time_part = parts
        
        log_booking_event(
            event_type="SPECIFIC_CANCELLATION_REQUESTED",
            user_id=user_id,
            user_name=display_name,
            details={"date": date_part, "time": time_part}
        )
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        start_cancellation_session(user_id)
        update_user_session(user_id, data={
            "cancel_date": date_part,
            "cancel_time": time_part
        })
        
        reply_to_user(reply_token, f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date_part} ‡πÄ‡∏ß‡∏•‡∏≤: {time_part}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≠‡∏á‡∏Ñ‡πà‡∏∞")
        
    except Exception as e:
        log_error_with_context(error=e, context="handle_specific_cancellation", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")

async def cancel_booking_process(reply_token: str, user_id: str, display_name: str):
    """‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"""
    try:
        session = get_user_session(user_id)
        
        if session:
            clear_reservation_session(user_id)
            
            log_booking_event(
                event_type="BOOKING_PROCESS_CANCELLED",
                user_id=user_id,
                user_name=display_name
            )
            
            reply_to_user(reply_token, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üòä\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞' ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞")
        else:
            reply_to_user(reply_token, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
            
    except Exception as e:
        log_error_with_context(error=e, context="cancel_booking_process", user_id=user_id)
        reply_to_user(reply_token, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")

# Utility functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
def get_active_booking_sessions() -> List[str]:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ user_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ session ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà active"""
    # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö session_manager
    from session_manager import get_all_active_sessions
    try:
        active_sessions = get_all_active_sessions()
        return [session['user_id'] for session in active_sessions if session.get('step') != 'cancel_phone']
    except Exception as e:
        logger.error(f"Error getting active booking sessions: {e}")
        return []

def get_booking_session_info(user_id: str) -> Optional[Dict[str, Any]]:
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        session = get_user_session(user_id)
        if not session:
            return None
        
        return {
            'user_id': user_id,
            'step': session.get('step', ''),
            'data': session.get('data', {}),
            'created_at': session.get('created_at'),
            'updated_at': session.get('updated_at')
        }
    except Exception as e:
        logger.error(f"Error getting booking session info for {user_id}: {e}")
        return None

def cleanup_expired_sessions():
    """‡∏•‡πâ‡∏≤‡∏á session ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å scheduled job)"""
    try:
        from session_manager import cleanup_expired_sessions as cleanup
        cleanup()
        logger.info("Expired sessions cleaned up successfully")
    except Exception as e:
        logger.error(f"Error cleaning up expired sessions: {e}")

def is_user_in_booking_process(user_id: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        session = get_user_session(user_id)
        return session is not None and session.get('step') in [
            'name', 'phone', 'date', 'time', 'party_size', 'special_requests'
        ]
    except Exception as e:
        logger.error(f"Error checking booking process for {user_id}: {e}")
        return False

def get_booking_progress(user_id: str) -> Dict[str, Any]:
    """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    try:
        session = get_user_session(user_id)
        if not session:
            return {'progress': 0, 'step': 'none', 'data': {}}
        
        step_progress = {
            'name': 1,
            'phone': 2,
            'date': 3,
            'time': 4,
            'party_size': 5,
            'special_requests': 6
        }
        
        current_step = session.get('step', 'none')
        progress = step_progress.get(current_step, 0)
        
        return {
            'progress': progress,
            'total_steps': 6,
            'step': current_step,
            'data': session.get('data', {}),
            'progress_percentage': int((progress / 6) * 100)
        }
    except Exception as e:
        logger.error(f"Error getting booking progress for {user_id}: {e}")
        return {'progress': 0, 'step': 'error', 'data': {}}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
def get_all_bookings_in_progress() -> List[Dict[str, Any]]:
    """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin)"""
    try:
        active_users = get_active_booking_sessions()
        bookings = []
        
        for user_id in active_users:
            progress = get_booking_progress(user_id)
            if progress['progress'] > 0:
                display_name = get_line_display_name(user_id)
                bookings.append({
                    'user_id': user_id,
                    'display_name': display_name,
                    'progress': progress,
                    'started_at': get_user_session(user_id).get('created_at')
                })
        
        return bookings
    except Exception as e:
        logger.error(f"Error getting all bookings in progress: {e}")
        return []

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timeout handling
async def handle_booking_timeout(user_id: str):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤"""
    try:
        from flex_messages import send_timeout_warning_flex
        
        log_booking_event(
            event_type="BOOKING_TIMEOUT",
            user_id=user_id,
            user_name=get_line_display_name(user_id)
        )
        
        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        send_timeout_warning_flex(user_id)
        
        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡∏ö session ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥ action ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        # clear_reservation_session(user_id)
        
    except Exception as e:
        log_error_with_context(
            error=e,
            context="handle_booking_timeout",
            user_id=user_id
        )